
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.AgendaScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.AgendaDayScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  date: 'date',
  dayNumber: 'dayNumber',
  name: 'name',
  projectId: 'projectId',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgendaItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  description: 'description',
  endTime: 'endTime',
  sessionId: 'sessionId',
  startTime: 'startTime',
  title: 'title',
  type: 'type',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgendaItemSpeakerScalarFieldEnum = {
  id: 'id',
  agendaItemId: 'agendaItemId',
  speakerId: 'speakerId'
};

exports.Prisma.AgendaSessionScalarFieldEnum = {
  id: 'id',
  color: 'color',
  createdAt: 'createdAt',
  dayId: 'dayId',
  endTime: 'endTime',
  startTime: 'startTime',
  title: 'title',
  updatedAt: 'updatedAt',
  venue: 'venue'
};

exports.Prisma.AttendeeScalarFieldEnum = {
  id: 'id',
  checkedIn: 'checkedIn',
  checkinTime: 'checkinTime',
  company: 'company',
  createdAt: 'createdAt',
  email: 'email',
  jobTitle: 'jobTitle',
  name: 'name',
  phone: 'phone',
  projectId: 'projectId',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendeesScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.ContactRequestScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.DelegateScalarFieldEnum = {
  id: 'id',
  address: 'address',
  booth: 'booth',
  company: 'company',
  createdAt: 'createdAt',
  description: 'description',
  email: 'email',
  featured: 'featured',
  image: 'image',
  jobTitle: 'jobTitle',
  name: 'name',
  phone: 'phone',
  priority: 'priority',
  projectId: 'projectId',
  status: 'status',
  type: 'type',
  updatedAt: 'updatedAt'
};

exports.Prisma.DelegatesScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.DiscountScalarFieldEnum = {
  id: 'id',
  code: 'code'
};

exports.Prisma.EnquiryScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.ExhibitorScalarFieldEnum = {
  id: 'id',
  boothNumber: 'boothNumber',
  category: 'category',
  createdAt: 'createdAt',
  image: 'image',
  name: 'name',
  projectId: 'projectId',
  size: 'size',
  status: 'status',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExhibitorsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.MarketingScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.MarketingCampaignScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.MediaPartnerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  image: 'image',
  name: 'name',
  priority: 'priority',
  projectId: 'projectId',
  type: 'type',
  updatedAt: 'updatedAt',
  website: 'website'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  contribution: 'contribution',
  createdAt: 'createdAt',
  image: 'image',
  name: 'name',
  projectId: 'projectId',
  status: 'status',
  type: 'type',
  updatedAt: 'updatedAt',
  website: 'website'
};

exports.Prisma.PartnersScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  currency: 'currency',
  description: 'description',
  endDate: 'endDate',
  name: 'name',
  startDate: 'startDate',
  updatedAt: 'updatedAt',
  venue: 'venue',
  website: 'website',
  year: 'year'
};

exports.Prisma.ProjectStatsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  delegates: 'delegates',
  exhibitors: 'exhibitors',
  mediaPartners: 'mediaPartners',
  partners: 'partners',
  projectId: 'projectId',
  speakers: 'speakers',
  sponsors: 'sponsors',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SpeakerScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SpeakerSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  speakerId: 'speakerId'
};

exports.Prisma.SpeakersScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.SponsorScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SponsorsScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.TicketingScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email'
};

exports.Prisma.UtmDataScalarFieldEnum = {
  id: 'id',
  campaign: 'campaign',
  content: 'content',
  conversions: 'conversions',
  createdAt: 'createdAt',
  medium: 'medium',
  name: 'name',
  projectId: 'projectId',
  source: 'source',
  term: 'term',
  updatedAt: 'updatedAt',
  visits: 'visits',
  websiteUrl: 'websiteUrl'
};

exports.Prisma.AgendadaysScalarFieldEnum = {
  id: 'id',
  v: 'v',
  date: 'date',
  dayNumber: 'dayNumber',
  name: 'name'
};

exports.Prisma.AgendaitemsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.AgendaitemspeakersScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.AgendasessionsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.ExhibitorsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.ProjectsScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SpeakersScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Agenda: 'Agenda',
  AgendaDay: 'AgendaDay',
  AgendaItem: 'AgendaItem',
  AgendaItemSpeaker: 'AgendaItemSpeaker',
  AgendaSession: 'AgendaSession',
  Attendee: 'Attendee',
  Attendees: 'Attendees',
  Campaign: 'Campaign',
  ContactRequest: 'ContactRequest',
  Delegate: 'Delegate',
  Delegates: 'Delegates',
  Discount: 'Discount',
  Enquiry: 'Enquiry',
  Exhibitor: 'Exhibitor',
  Exhibitors: 'Exhibitors',
  Lead: 'Lead',
  Marketing: 'Marketing',
  MarketingCampaign: 'MarketingCampaign',
  MediaPartner: 'MediaPartner',
  Order: 'Order',
  Package: 'Package',
  Partner: 'Partner',
  Partners: 'Partners',
  Project: 'Project',
  ProjectStats: 'ProjectStats',
  Session: 'Session',
  Speaker: 'Speaker',
  SpeakerSession: 'SpeakerSession',
  Speakers: 'Speakers',
  Sponsor: 'Sponsor',
  Sponsors: 'Sponsors',
  Ticket: 'Ticket',
  Ticketing: 'Ticketing',
  User: 'User',
  UtmData: 'UtmData',
  agendadays: 'agendadays',
  agendaitems: 'agendaitems',
  agendaitemspeakers: 'agendaitemspeakers',
  agendasessions: 'agendasessions',
  exhibitors: 'exhibitors',
  projects: 'projects',
  speakers: 'speakers'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
